

Clase 19--------------------------------------------------------------------------------------------------------------------------------------------------------


SSH o Secure Shell: Es un protocolo de red que permite acceso remoto seguro a través de una conexión encriptada. Este método de autenticación requiere un passphrase (contraseña) o tambien puede funcionar sin passphrase sobre la clave.
.
En el directorio Home ~

$ git config -l: Muestra la configuración dentro de Git(user y email), Este comando funciona por que Git esta instalado en todo el equipo local.
.
$ git config --global user.email “nombre_email_cambiado” : Se puede utilizar este mismo comando para cambiar el email.
.
Creamos la llave SSH

$ ssh-keygen -t rsa -b4096 -C "tu_email@gmail.com"
-t = Especifica cual es el algoritmo que vamos a usar para crear esa llave.
rsa = Algoritmo a usar, hasta el momento el mas popular.
-b = Especifica que tan compleja es la llave.
4096 = Complejidad de la llave desde una perspectiva matemática.
-C = Indica a que correo electrónico va estar conectado esta llave
"tu_email@gmail.com" = Correo electrónico.
.
Dato: Guardar la llave en la dirección predeterminada.
Dato2: Passphrase: Password con espacios o Contraseña adicional de texto que le vas a poner a tu llave pública y privada.
.
1er Paso:
Una ves que tengamos la llave, tenemos que agregarlo al entorno, y el entorno es básicamente que el sistema operativo donde tu trabajas sepa que la llave existe. Para ello ejecutamos lo sgte:
.
revisar el servidor de llaves / Evalúa que un comando se dispare.

$ eval $(ssh-agent -s)
Dato: Agent pid 4724

Agent = Significa que el servidor de SHH esta corriendo.
pid = Process id o identificador del proceso.
4724 = Número que al sistema operativo le dice que el proceso esta corriendo.
.
2do Paso:

Agregamos la llave privada a nuestro sistema o al servidor por que no basta con que la llave solo exista, sino debemos decirle que existe. Para ello ejecutamos el siguiente comando:

$ ssh-add ~/.ssh/id_rsa
~ = Home
.ssh = carpeta ssh
id_rsa = llave privada la que nunca debemos de mostrar.


Clase 20 ---------------------------------------------------------------------------------------------------------------------------------------

*una ves creada la llave publica y privada y añadida a nuestro servidor de SSH la agregamos a GitHub

vamos a la pestaña Settings y agregamos la llave

luevo vamos al proyecto en git hub y en la pestaña clone or download, copiamos el link q nos aparece en "Clone with SSH"

vamos al repositorio local y cambiamos el url de nuestro repositorio remoto

 git remote -v //lista los repositorios remotos

 git remote set-url origin (url)  //cambiamos la url del repositorio remoto origin

Sabemos que funciona haciedo cambios. no va a pedir la contraseña https

traemos el repositorio con git pull origin master

hacemos los cambios y guardamos con git commit -am " "

hacemos otro git pull para ver q las cosas esten bien 

y mandamos nuestro con git push origin master



Clase 21-----------------------------------------------------------------------------------------------------------------------------

git log --all --graph --decorate --oneline   para mostrar todo el log bien decorado y con grafico y en una sola linea

alias arbolito="git log --all --graph --decorate --oneline"  para asignar un alias y no tener q escribir todo el comando 

Los tags o etiquetas nos permiten asignar versiones a los commits con cambios más importantes o significativos de nuestro proyecto.

Comandos para trabajar con etiquetas:

Crear un nuevo tag y asignarlo a un commit: git tag -a nombre-del-tag id-del-commit.
Borrar un tag en el repositorio local: git tag -d nombre-del-tag.
Listar los tags de nuestro repositorio local: git tag o git show-refs --tags.
Publicar un tag en el repositorio remoto: git push origin --tags.
Borrar un tag del repositorio remoto: git tag -d nombre-del-tag y git push origin :refs/tags/nombre-del-tag.

Clase 22-----------------------------------------------------------------------------------------------------------------------------


Puedes trabajar con ramas que nunca envias a GitHub, así como pueden haber ramas importantes en GitHub que nunca usas en el repositorio local. Lo importantes que aprendas a manejarlas para trabajar profesionalmente.

Crear una rama en el repositorio local: git branch nombre-de-la-rama o git checkout -b nombre-de-la-rama.
Publicar una rama local al repositorio remoto: git push origin nombre-de-la-rama.
Recuerda que podemos ver gráficamente nuestro entorno y flujo de trabajo local con Git usando el comando gitk.


Clase 23---------------------------------------------------------------------------------------------------------------------------

Por defecto, cualquier persona puede clonar o descargar tu proyecto desde GitHub, pero no pueden crear commits, ni ramas, ni nada.

Existen varias formas de solucionar esto para poder aceptar contribuciones. Una de ellas es añadir a cada persona de nuestro equipo como colaborador de nuestro repositorio.

Solo debemos entrar a la configuración de colaboradores de nuestro proyecto (Repositorio > Settings > Collaborators) y añadir el email o username de los nuevos colaboradores. 


Clase 24------------------------------------------------------------------------------------------------------------------------------------------------

trabajamos en varias ramas distintas y las subimos al repositorio remoto

git pull origin header   ----  para traer la rama header

git push origin header    ---- para mandar los cambios 

recordar git checkout RAMA  para moverse entre ramas

luego modificamos la rama footer

si los cambios en footer los hizo un colaborador primero los traemos con pull

y luego desde la rama master hacemos merge con la rama header y luego con la rama footer

git merge header 

enviamos los cambios y luego,

git merge footer

y enviemos nuevamente los cambios.

